--// ðŸ©¸ Chrollox Debug Panel v2 (Slider Edition)
--// Safe personal-use script for Roblox Studio testing

local player = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

--// ScreenGui setup
local gui = Instance.new("ScreenGui")
gui.Name = "ChrolloxPanel"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

--// Toggle Button
local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0, 130, 0, 40)
toggleBtn.Position = UDim2.new(0.05, 0, 0.5, -20)
toggleBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
toggleBtn.Text = "ðŸ©¸ Chrollox"
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextSize = 16
toggleBtn.Active = true
toggleBtn.Draggable = true
toggleBtn.Parent = gui
Instance.new("UICorner", toggleBtn).CornerRadius = UDim.new(0, 6)

--// Red glow animation
task.spawn(function()
	while task.wait(1) do
		local glow = TweenService:Create(toggleBtn, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),
			{BackgroundColor3 = Color3.fromRGB(255, 0, 0)})
		glow:Play()
		glow.Completed:Wait()
		local fade = TweenService:Create(toggleBtn, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),
			{BackgroundColor3 = Color3.fromRGB(150, 0, 0)})
		fade:Play()
	end
end)

--// Main Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 280, 0, 240)
frame.Position = UDim2.new(0.5, -140, 0.5, -120)
frame.BackgroundColor3 = Color3.fromRGB(40, 0, 0)
frame.Visible = false
frame.Active = true
frame.Draggable = true
frame.Parent = gui
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 8)

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Text = "ðŸ©¸ Chrollox Debug Panel"
title.Font = Enum.Font.GothamBlack
title.TextSize = 18
title.TextColor3 = Color3.fromRGB(255, 70, 70)
title.Parent = frame

--// Wait for character
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")

--// Slider builder
local function makeSlider(name, posY, min, max, startValue, onChange)
	local label = Instance.new
	label.TextSize = 14
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.Text = name .. ": " .. startValue
	label.Parent = frame

	local bar = Instance.new("Frame")
	bar.Size = UDim2.new(0, 240, 0, 6)
	bar.Position = UDim2.new(0, 20, 0, posY + 25)
	bar.BackgroundColor3 = Color3.fromRGB(80, 0, 0)
	bar.Parent = frame
	Instance.new("UICorner", bar).CornerRadius = UDim.new(0, 4)

	local fill = Instance.new("Frame")
	fill.Size = UDim2.new((startValue - min) / (max - min), 0, 1, 0)
	fill.BackgroundColor3 = Color3.fromRGB(255, 60, 60)
	fill.Parent = bar
	Instance.new("UICorner", fill).CornerRadius = UDim.new(0, 4)

	local circle = Instance.new("Frame")
	circle.Size = UDim2.new(0, 12, 0, 12)
	circle.AnchorPoint = Vector2.new(0.5, 0.5)
	circle.Position = UDim2.new((startValue - min) / (max - min), 0, 0.5, 0)
	circle.BackgroundColor3 = Color3.fromRGB(255, 90, 90)
	circle.Parent = bar
	local circleCorner = Instance.new("UICorner")
	circleCorner.CornerRadius = UDim.new(1, 0)
	circleCorner.Parent = circle

	local dragging = false

	local function update(input)
		local percent = math.clamp((input.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X, 0, 1)
		fill.Size = UDim2.new(percent, 0, 1, 0)
		circle.Position = UDim2.new(percent, 0, 0.5, 0)
		local value = math.floor(min + (max - min) * percent)
		label.Text = name .. ": " .. value
		onChange(value)
	end

	bar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			update(input)
		end
	end)

	bar.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	UIS.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			update(input)
		end
	end)
end

--// Make Speed and JumpPower sliders
makeSlider("WalkSpeed", 50, 8, 200, humanoid.WalkSpeed, function(v)
	humanoid.WalkSpeed = v
end)

makeSlider("JumpPower", 120, 20, 250, humanoid.JumpPower, function(v)
	humanoid.JumpPower = v
end)

--// Save/Restore settings after respawn
local saved = { WalkSpeed = humanoid.WalkSpeed, JumpPower = humanoid.JumpPower }

player.CharacterAdded:Connect(function(newChar)
	char = newChar
	humanoid = newChar:WaitForChild("Humanoid")
	humanoid.WalkSpeed = saved.WalkSpeed
	humanoid.JumpPower = saved.JumpPower
end)

--// Track updates
humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
	saved.WalkSpeed = humanoid.WalkSpeed
end)

humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
	saved.JumpPower = humanoid.JumpPower
end)

--// Toggle show/hide
toggleBtn.MouseButton1Click:Connect(function()
	frame.Visible = not frame.Visible
end)
